/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "demux_dest.v:1" *)
module demux_dest_synth(clk, reset, data_in, valid_in0, valid_in1, valid_out0, valid_out1, data_out0, data_out1);
  (* src = "demux_dest.v:43" *)
  wire [4:0] _00_;
  (* src = "demux_dest.v:43" *)
  wire [4:0] _01_;
  (* src = "demux_dest.v:43" *)
  wire _02_;
  (* src = "demux_dest.v:43" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "demux_dest.v:2" *)
  input clk;
  (* src = "demux_dest.v:5" *)
  input [4:0] data_in;
  (* src = "demux_dest.v:10" *)
  output [4:0] data_out0;
  (* src = "demux_dest.v:11" *)
  output [4:0] data_out1;
  (* src = "demux_dest.v:3" *)
  input reset;
  (* src = "demux_dest.v:15" *)
  wire valid_holdValue0;
  (* src = "demux_dest.v:6" *)
  input valid_in0;
  (* src = "demux_dest.v:7" *)
  input valid_in1;
  (* src = "demux_dest.v:8" *)
  output valid_out0;
  (* src = "demux_dest.v:9" *)
  output valid_out1;
  NOT _13_ (
    .A(reset),
    .Y(_04_)
  );
  NOT _14_ (
    .A(data_in[0]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(data_in[1]),
    .Y(_06_)
  );
  NOT _16_ (
    .A(data_in[2]),
    .Y(_07_)
  );
  NOT _17_ (
    .A(data_in[3]),
    .Y(_08_)
  );
  NOT _18_ (
    .A(data_in[4]),
    .Y(_09_)
  );
  NOR _19_ (
    .A(_04_),
    .B(valid_in0),
    .Y(_10_)
  );
  NAND _20_ (
    .A(valid_in1),
    .B(_10_),
    .Y(_11_)
  );
  NOT _21_ (
    .A(_11_),
    .Y(_03_)
  );
  NOR _22_ (
    .A(_06_),
    .B(_11_),
    .Y(_01_[1])
  );
  NOR _23_ (
    .A(_07_),
    .B(_11_),
    .Y(_01_[2])
  );
  NOR _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_01_[3])
  );
  NOR _25_ (
    .A(_09_),
    .B(_11_),
    .Y(_01_[4])
  );
  NAND _26_ (
    .A(reset),
    .B(valid_in0),
    .Y(_12_)
  );
  NOT _27_ (
    .A(_12_),
    .Y(_02_)
  );
  NOR _28_ (
    .A(_05_),
    .B(_12_),
    .Y(_00_[0])
  );
  NOR _29_ (
    .A(_06_),
    .B(_12_),
    .Y(_00_[1])
  );
  NOR _30_ (
    .A(_07_),
    .B(_12_),
    .Y(_00_[2])
  );
  NOR _31_ (
    .A(_08_),
    .B(_12_),
    .Y(_00_[3])
  );
  NOR _32_ (
    .A(_09_),
    .B(_12_),
    .Y(_00_[4])
  );
  NOR _33_ (
    .A(_05_),
    .B(_11_),
    .Y(_01_[0])
  );
  (* src = "demux_dest.v:43" *)
  DFF _34_ (
    .C(clk),
    .D(_02_),
    .Q(valid_out0)
  );
  (* src = "demux_dest.v:43" *)
  DFF _35_ (
    .C(clk),
    .D(_03_),
    .Q(valid_out1)
  );
  (* src = "demux_dest.v:43" *)
  DFF _36_ (
    .C(clk),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  (* src = "demux_dest.v:43" *)
  DFF _37_ (
    .C(clk),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  (* src = "demux_dest.v:43" *)
  DFF _38_ (
    .C(clk),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  (* src = "demux_dest.v:43" *)
  DFF _39_ (
    .C(clk),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  (* src = "demux_dest.v:43" *)
  DFF _40_ (
    .C(clk),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  (* src = "demux_dest.v:43" *)
  DFF _41_ (
    .C(clk),
    .D(_01_[0]),
    .Q(data_out1[0])
  );
  (* src = "demux_dest.v:43" *)
  DFF _42_ (
    .C(clk),
    .D(_01_[1]),
    .Q(data_out1[1])
  );
  (* src = "demux_dest.v:43" *)
  DFF _43_ (
    .C(clk),
    .D(_01_[2]),
    .Q(data_out1[2])
  );
  (* src = "demux_dest.v:43" *)
  DFF _44_ (
    .C(clk),
    .D(_01_[3]),
    .Q(data_out1[3])
  );
  (* src = "demux_dest.v:43" *)
  DFF _45_ (
    .C(clk),
    .D(_01_[4]),
    .Q(data_out1[4])
  );
  assign valid_holdValue0 = valid_in0;
endmodule
